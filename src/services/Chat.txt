"use strict";
// import { DiscussServiceClient } from "@google-ai/generativelanguage";
// import { GoogleAuth } from "google-auth-library";
// import 'dotenv/config';
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// const MODEL_NAME = "models/chat-bison-001";
// const API_KEY: string = process.env.API_KEY as string;
// const client = new DiscussServiceClient({
//     authClient: new GoogleAuth().fromAPIKey("AIzaSyAY5DqOhvpUkdEjx1VTLD_W8hHUgd-mY_0"),
// });
// async function main(searchQuery: string) {
//     let first = searchQuery;
//     let messages = [{ content: first }];
//     const result: any = await client.generateMessage({
//         model: MODEL_NAME,
//         prompt: { messages },
//     });
//     console.log("User:\n\n", first, "\n\n")
//     console.log("Personal Finance Assistant:\n\n", result[0]?.candidates[0].content, "\n\n");
//     let second = "Oh, how does it work in a startup?"
//     messages.push({ content: result[0].candidates[0].content });
//     messages.push({ content: second });
//     const secondResult: any = await client.generateMessage({
//         model: MODEL_NAME,
//         prompt: { messages },
//     });
//     console.log("User:\n\n", second, "\n\n")
//     console.log("Palm:\n\n", secondResult[0].candidates[0].content, "\n\n");
// }
var generativelanguage_1 = require("@google-ai/generativelanguage");
var google_auth_library_1 = require("google-auth-library");
require("dotenv/config");
var MODEL_NAME = "models/chat-bison-001";
var API_KEY = process.env.API_KEY;
var client = new generativelanguage_1.DiscussServiceClient({
    authClient: new google_auth_library_1.GoogleAuth().fromAPIKey("AIzaSyAY5DqOhvpUkdEjx1VTLD_W8hHUgd-mY_0"),
});
function getResponses(texts) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function () {
        var responses, i, messages, result, response, nextResult, nextResponse;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    responses = [];
                    i = 0;
                    _c.label = 1;
                case 1:
                    if (!(i < texts.length)) return [3 /*break*/, 5];
                    messages = [{ content: texts[i] }];
                    return [4 /*yield*/, client.generateMessage({
                            model: MODEL_NAME,
                            prompt: { messages: messages },
                        })];
                case 2:
                    result = _c.sent();
                    response = (_a = result[0]) === null || _a === void 0 ? void 0 : _a.candidates[0].content;
                    console.log("User:\n\n", texts[i], "\n\n");
                    console.log("Personal Finance Assistant:\n\n", response, "\n\n");
                    responses.push({ text: texts[i], response: response });
                    if (!(i < texts.length - 1)) return [3 /*break*/, 4];
                    messages.push({ content: response });
                    return [4 /*yield*/, client.generateMessage({
                            model: MODEL_NAME,
                            prompt: { messages: messages },
                        })];
                case 3:
                    nextResult = _c.sent();
                    nextResponse = (_b = nextResult[0]) === null || _b === void 0 ? void 0 : _b.candidates[0].content;
                    console.log("User:\n\n", nextResponse, "\n\n");
                    console.log("Personal Finance Assistant:\n\n", nextResponse, "\n\n");
                    responses.push({ text: nextResponse, response: nextResponse });
                    _c.label = 4;
                case 4:
                    i++;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/, responses];
            }
        });
    });
}
// Example usage
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var texts, responses;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    texts = ["How can I save more money?", "How do Google for Startup Africa work", "Can you explain investing in stocks?"];
                    return [4 /*yield*/, getResponses(texts)];
                case 1:
                    responses = _a.sent();
                    console.log(responses);
                    return [2 /*return*/];
            }
        });
    });
}
main();
